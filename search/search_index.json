{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"After-Effects \u00b6 An Effortless & Simple post-installation script for Ubuntu, Linux Mint, Elementary OS, Debian and their derivatives. This script is built for one purpose only. Automating post installation tasks on a fresh Ubuntu/Debian installation. Usage \u00b6 Step 1: Get the script and verify its integrity \u00b6 wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/after-effects -O after-effects wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/sha256sums.txt -O sha256sums.txt sha256sum -c sha256sums.txt Step 2: Update the config \u00b6 Update the config file to suit your needs. Please see Configuration & Tasks for more details. Some example configs can be found here . Step 3: Run it \u00b6 Run the script as root . chmod +x after-effects sudo ./after-effects -c <your config.yml> See in Action \u00b6 Supported Distros \u00b6 I have not tested the script on following distros. Because they use ubuntu as their base, It should work fine. But no promises. Tip Please check Supported-Distros for complete list of supported distributions. Features \u00b6 Adding Repositories (Limited set of curated repositories only) Installing packages from system repositories Installing statically linked binaries Remove Preinstalled packages Install PIP packages. (You should use virtualenv for your projects, ONLY install pip packages which are absolutely essential.) Add PPAs (Ubuntu & Ubuntu derivatives only) Debian (.deb) packages Snap packages","title":"Home"},{"location":"#after-effects","text":"An Effortless & Simple post-installation script for Ubuntu, Linux Mint, Elementary OS, Debian and their derivatives. This script is built for one purpose only. Automating post installation tasks on a fresh Ubuntu/Debian installation.","title":"After-Effects"},{"location":"#usage","text":"","title":"Usage"},{"location":"#step-1-get-the-script-and-verify-its-integrity","text":"wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/after-effects -O after-effects wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/sha256sums.txt -O sha256sums.txt sha256sum -c sha256sums.txt","title":"Step 1: Get the script and verify its integrity"},{"location":"#step-2-update-the-config","text":"Update the config file to suit your needs. Please see Configuration & Tasks for more details. Some example configs can be found here .","title":"Step 2: Update the config"},{"location":"#step-3-run-it","text":"Run the script as root . chmod +x after-effects sudo ./after-effects -c <your config.yml>","title":"Step 3: Run it"},{"location":"#see-in-action","text":"","title":"See in Action"},{"location":"#supported-distros","text":"I have not tested the script on following distros. Because they use ubuntu as their base, It should work fine. But no promises. Tip Please check Supported-Distros for complete list of supported distributions.","title":"Supported Distros"},{"location":"#features","text":"Adding Repositories (Limited set of curated repositories only) Installing packages from system repositories Installing statically linked binaries Remove Preinstalled packages Install PIP packages. (You should use virtualenv for your projects, ONLY install pip packages which are absolutely essential.) Add PPAs (Ubuntu & Ubuntu derivatives only) Debian (.deb) packages Snap packages","title":"Features"},{"location":"changelog/","text":"Changelog \u00b6 v7.1.0 - 2021-04-15 \u00b6 \ud83c\udf52 Features & Enhancements \u00b6 promote ubuntu 21.04 to stable ( 098bb13 ) \ud83d\udc1b Bug Fixes \u00b6 incorrect permissions on apt repository .list files when umask is not default(0022) ( 234ea48 ) \ud83d\udcd6 Documentation \u00b6 update for 7.1.0 ( af96d84 ) remove uptime badges ( d13ff19 ) update to include support for 21.04 ( 051da3c ) deps: update mkdocs to 7.1.0 ( 76ca465 ) \ud83e\udd16 Continuous Integration & Automation \u00b6 update shellcheck to use docker ( ee3f808 ) use docker/setup-qemu-action to setup qemu, update build configs ( 6639dfd ) automation: automatically stale issues via actions/stale ( 47544fc ) stale: fix wokflow messages to match config ( 46aef6b ) \ud83e\udd7a Maintanance \u00b6 automatic changelog generation ( ca1ce77 ) v7.0.0 - 2021-01-26 \u00b6 New Repository Google - Bazel New-Repository Google - gVisor New-Repository Microsoft - Azure CLI New-Repository Microsoft - Edge New-Repository Microsoft - Teams New-Repository Podman (via OBS from Kubic Project) New-Repository ROS2 New-Repository SublimeText BREAKING-CHANGE Renamed Google chrome repo config from google to chrome REMOVED Python packages (Due to low usage and you should use either system package manger or virtual environments) REMOVED Resetting repo features. This is because apt-key is deprecated and keys/sources might have been added by other tools or manually, and we do not want to change them without referring to thier key ids. REMOVED Duo for linux repository. It requires additional configuration and is best handled via config mangemment. DISTRO Drop support for Ubuntu Xenial(16.04) and other derivatives based on it. (Internal) Rework adding apt-keys as apt-key is deprecated. (Internal) Add arch checks for gcsfuse (Internal) Logging tweaks v6.3.0 \u00b6 Added support for Linux Mint 20.1 (Ulyssa). Dropped support for Ubuntu 16.04, Elementary OS loki, Linux Mint 18 and Debian 8(stretch). v6.2.0 \u00b6 New-Repository Hashicorp Repository (Terraform, Vault Consul etc). Fix -d and -k flags not working properly. #45 . Enable Hirsute Hippo.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v710-2021-04-15","text":"","title":"v7.1.0 - 2021-04-15"},{"location":"changelog/#features-enhancements","text":"promote ubuntu 21.04 to stable ( 098bb13 )","title":"\ud83c\udf52 Features &amp; Enhancements"},{"location":"changelog/#bug-fixes","text":"incorrect permissions on apt repository .list files when umask is not default(0022) ( 234ea48 )","title":"\ud83d\udc1b Bug Fixes"},{"location":"changelog/#documentation","text":"update for 7.1.0 ( af96d84 ) remove uptime badges ( d13ff19 ) update to include support for 21.04 ( 051da3c ) deps: update mkdocs to 7.1.0 ( 76ca465 )","title":"\ud83d\udcd6 Documentation"},{"location":"changelog/#continuous-integration-automation","text":"update shellcheck to use docker ( ee3f808 ) use docker/setup-qemu-action to setup qemu, update build configs ( 6639dfd ) automation: automatically stale issues via actions/stale ( 47544fc ) stale: fix wokflow messages to match config ( 46aef6b )","title":"\ud83e\udd16 Continuous Integration &amp; Automation"},{"location":"changelog/#maintanance","text":"automatic changelog generation ( ca1ce77 )","title":"\ud83e\udd7a Maintanance"},{"location":"changelog/#v700-2021-01-26","text":"New Repository Google - Bazel New-Repository Google - gVisor New-Repository Microsoft - Azure CLI New-Repository Microsoft - Edge New-Repository Microsoft - Teams New-Repository Podman (via OBS from Kubic Project) New-Repository ROS2 New-Repository SublimeText BREAKING-CHANGE Renamed Google chrome repo config from google to chrome REMOVED Python packages (Due to low usage and you should use either system package manger or virtual environments) REMOVED Resetting repo features. This is because apt-key is deprecated and keys/sources might have been added by other tools or manually, and we do not want to change them without referring to thier key ids. REMOVED Duo for linux repository. It requires additional configuration and is best handled via config mangemment. DISTRO Drop support for Ubuntu Xenial(16.04) and other derivatives based on it. (Internal) Rework adding apt-keys as apt-key is deprecated. (Internal) Add arch checks for gcsfuse (Internal) Logging tweaks","title":"v7.0.0 - 2021-01-26"},{"location":"changelog/#v630","text":"Added support for Linux Mint 20.1 (Ulyssa). Dropped support for Ubuntu 16.04, Elementary OS loki, Linux Mint 18 and Debian 8(stretch).","title":"v6.3.0"},{"location":"changelog/#v620","text":"New-Repository Hashicorp Repository (Terraform, Vault Consul etc). Fix -d and -k flags not working properly. #45 . Enable Hirsute Hippo.","title":"v6.2.0"},{"location":"clioptions/","text":"Command line options \u00b6 YAML Configuration file \u00b6 Usage ./after-effects --config-file <filename> OR ./after-effects -c <filename> Simulating package installation \u00b6 Usage ./after-effects -s OR ./after-effects --simulate This flag/option applies to following tasks Installing apt packages. Installing Debian package archives (DEBs). Installing Python packages. Upgrading system packages. Purging unwanted packages. Please do have a look at exceptions, as all tasks cannot be simulated. This option will simulate installing packages mentioned in the config, using the apt-get's dry-run option. This option can be used to check if the configuration and for testing. Installation of DEB files also behaves in a similar way. It uses dpkg -i --dry-run to simulate installation. Its a very good idea to simulate installation when you have reconfigured the apps and packages in the config to check what might be error prone. DEB package files and binaries will be downloaded unlike apt-get package installs. Exceptions - Not everything can be simulated Simulate flag will not simulate adding Repositories or PPAs. If you want to revert the changes please use Reset Repositories option. PPAs and repositories will be added regardless of the flag. APT package upgrades and apt repository metadata updates cannot be simulated. Snap package installation cannot be simulated Skip Version Checks \u00b6 Usage ./after-effects --no-version-check Script will warn you and exit if you are not running latest version of the script. You can skip that by using the above option. Fix for latest Ubuntu releases \u00b6 Usage ./after-effects -f OR ./after-effects --fix This flag/option applies to following repositories Google Cloud SDK GCSFUSE Docker Community Edition Wine HQ Usually it takes a while for additional repositories (Docker,etc) to add support for latest release of Ubuntu. However we can use the previous release for which packages might be available. Using packages built for previous release works fine most of the time. Repositories like Spotify and Google Chrome do not use code names in their repository URLs. So the above workaround is not necessary. Derivatives of Ubuntu will use the code name of Ubuntu on which they are based. For example Linux mint 18.2 Serena will use code name xenial as it is based on Ubuntu 16.04 Xenial Xerus This option applies only for the latest release and will be ignored if the release is not latest. This options cannot be applied for PPAs Fix fallback to LTS \u00b6 Usage ./after-effects --fix-mode-lts Use LTS as fallback. This flag should be used in conjunction with --fix Otherwise it will be ignored. Instead of using previous Ubuntu release this will use the last LTS release. i.e if you are on 21.04 and 20.04 repositories will be used. Please use this with caution as it may not work. This has no effect on Debian and its derivatives. Note for Pre-Release/ development version of Ubuntu/Debian If you are using a pre-release version of Ubuntu, you can use --pre-release flag to apply the above mentioned fix to pre-release version of Ubuntu. This flag can be used independent of --fix . If both are used together then both flags will be applied if the release is upcoming-release. If the release is stable, only --fix flag will be valid and --pre-release is ignored. Purge not required packages \u00b6 Usage ./after-effects -d OR ./after-effects --purge Usually Ubuntu comes with some pre-installed games, packages which you might not need. This option is a switch to used in purging these packages mentioned in the subsequent sections. Since it is possible that user might purge necessary packages like sudo or other core system components, these just acts like a barrier from accidentally doing so. Warning This flag MUST be passed, if you intend to purge packages from system. Otherwise you will receive an error. If you are using YML config file you MUST set purge_enabled: true under config.flags. See Example YAML file for more info. Delete log file \u00b6 Usage ./after-effects -l OR ./after-effects --delete-log Just a quick way to delete logs generated by this script. Flag priority If you pass -l rest of the commands will be ignored, as the script exits after deleting the log! Keep downloaded DEB files \u00b6 Usage ./after-effects -k OR ./after-effects --keep-debs Keeps packages cached by APT and downloaded DEB packages. Default behavior is to clean apt cache and delete downloaded DEB packages. Remote YAML configuration file \u00b6 Usage ./after-effects --remote-yaml <URL to YAML file> OR ./after-effects -r <URL to YAML file> You can specify YAML file to use. Script will fetch it and parse it.The file should be available without any interactive logins. Warning If using GitHub gists, you MUST use raw gist URL. You should only use trusted remote locations to save your configurations and only use trusted configurations. Version \u00b6 Usage ./after-effect -v OR ./after-effects --version This will display version info. You do not have to be root to run this. Autopilot Mode \u00b6 Autopilot mode is designed to run the script in a non interactive manner. Please see Autopilot in tasks for more info. Help \u00b6 Displays this help option. ./after-effects -h A Post Installation Script for Ubuntu, Debian, Linux-Mint, elementaryOS, Pop!_OS, MX Linux etc. Usage: [sudo] ./after-effects [options] Non-Action options (can be run as non-root user) --------------------------------------------------------- [-v | --version] Display version info. [-h | --help] Display this help message. Configuration Options --------------------------------------------------------- [-c | --config-file] Local yaml config file. [-r | --remote-yaml] Use config yaml from a URL. The following options are \"action\" options and will make changes to your system depending on tasks selcted. --------------------------------------------------------- [-d | --purge] Enable Purging packages [-f | --fix] Fix codenames for new releases [-p | --pre-release] Same as --fix but for beta/alpha releases of Ubuntu and Debian. [--fix-mode-lts] Similar to --fix but fallback to last LTS. MUST be used with --fix. Only works on Ubuntu and Debian. [-k | --keep-debs] Do not invoke apt-clean & do not delete downloaded deb packages. [-l | --delete-log] Deletes the logfile. (log/after-effects.log) [-s | --simulate] Try not to make changes to system and use --dry-run Please read the documentation, to know its limits as everything cannot be simulated. Other Options --------------------------------------------------------- [--no-env-checks] Skip some env checks. [--no-version-check] Skip checking for latest version [-A | --autopilot] Enables AUTOPILOT mode(No Prompts). Debugging Options --------------------------------------------------------- [-nx | --nx] Just process config but do not make any changes to the system. [--debug] Prints debug logs. [--debug-trace] Prints trace level logs which includes output from apt-get and other commands. Documentation, License and Version Information --------------------------------------------------------- Version : 7.0.0 GitHub : https://git.io/ubuntu-post-install Docs : https://ae.prasadt.com License : GPLv3 ---------------------------------------------------------","title":"Options"},{"location":"clioptions/#command-line-options","text":"","title":"Command line options"},{"location":"clioptions/#yaml-configuration-file","text":"Usage ./after-effects --config-file <filename> OR ./after-effects -c <filename>","title":"YAML Configuration file"},{"location":"clioptions/#simulating-package-installation","text":"Usage ./after-effects -s OR ./after-effects --simulate This flag/option applies to following tasks Installing apt packages. Installing Debian package archives (DEBs). Installing Python packages. Upgrading system packages. Purging unwanted packages. Please do have a look at exceptions, as all tasks cannot be simulated. This option will simulate installing packages mentioned in the config, using the apt-get's dry-run option. This option can be used to check if the configuration and for testing. Installation of DEB files also behaves in a similar way. It uses dpkg -i --dry-run to simulate installation. Its a very good idea to simulate installation when you have reconfigured the apps and packages in the config to check what might be error prone. DEB package files and binaries will be downloaded unlike apt-get package installs. Exceptions - Not everything can be simulated Simulate flag will not simulate adding Repositories or PPAs. If you want to revert the changes please use Reset Repositories option. PPAs and repositories will be added regardless of the flag. APT package upgrades and apt repository metadata updates cannot be simulated. Snap package installation cannot be simulated","title":"Simulating package installation"},{"location":"clioptions/#skip-version-checks","text":"Usage ./after-effects --no-version-check Script will warn you and exit if you are not running latest version of the script. You can skip that by using the above option.","title":"Skip Version Checks"},{"location":"clioptions/#fix-for-latest-ubuntu-releases","text":"Usage ./after-effects -f OR ./after-effects --fix This flag/option applies to following repositories Google Cloud SDK GCSFUSE Docker Community Edition Wine HQ Usually it takes a while for additional repositories (Docker,etc) to add support for latest release of Ubuntu. However we can use the previous release for which packages might be available. Using packages built for previous release works fine most of the time. Repositories like Spotify and Google Chrome do not use code names in their repository URLs. So the above workaround is not necessary. Derivatives of Ubuntu will use the code name of Ubuntu on which they are based. For example Linux mint 18.2 Serena will use code name xenial as it is based on Ubuntu 16.04 Xenial Xerus This option applies only for the latest release and will be ignored if the release is not latest. This options cannot be applied for PPAs","title":"Fix for latest Ubuntu releases"},{"location":"clioptions/#fix-fallback-to-lts","text":"Usage ./after-effects --fix-mode-lts Use LTS as fallback. This flag should be used in conjunction with --fix Otherwise it will be ignored. Instead of using previous Ubuntu release this will use the last LTS release. i.e if you are on 21.04 and 20.04 repositories will be used. Please use this with caution as it may not work. This has no effect on Debian and its derivatives. Note for Pre-Release/ development version of Ubuntu/Debian If you are using a pre-release version of Ubuntu, you can use --pre-release flag to apply the above mentioned fix to pre-release version of Ubuntu. This flag can be used independent of --fix . If both are used together then both flags will be applied if the release is upcoming-release. If the release is stable, only --fix flag will be valid and --pre-release is ignored.","title":"Fix fallback to LTS"},{"location":"clioptions/#purge-not-required-packages","text":"Usage ./after-effects -d OR ./after-effects --purge Usually Ubuntu comes with some pre-installed games, packages which you might not need. This option is a switch to used in purging these packages mentioned in the subsequent sections. Since it is possible that user might purge necessary packages like sudo or other core system components, these just acts like a barrier from accidentally doing so. Warning This flag MUST be passed, if you intend to purge packages from system. Otherwise you will receive an error. If you are using YML config file you MUST set purge_enabled: true under config.flags. See Example YAML file for more info.","title":"Purge not required packages"},{"location":"clioptions/#delete-log-file","text":"Usage ./after-effects -l OR ./after-effects --delete-log Just a quick way to delete logs generated by this script. Flag priority If you pass -l rest of the commands will be ignored, as the script exits after deleting the log!","title":"Delete log file"},{"location":"clioptions/#keep-downloaded-deb-files","text":"Usage ./after-effects -k OR ./after-effects --keep-debs Keeps packages cached by APT and downloaded DEB packages. Default behavior is to clean apt cache and delete downloaded DEB packages.","title":"Keep downloaded DEB files"},{"location":"clioptions/#remote-yaml-configuration-file","text":"Usage ./after-effects --remote-yaml <URL to YAML file> OR ./after-effects -r <URL to YAML file> You can specify YAML file to use. Script will fetch it and parse it.The file should be available without any interactive logins. Warning If using GitHub gists, you MUST use raw gist URL. You should only use trusted remote locations to save your configurations and only use trusted configurations.","title":"Remote YAML configuration file"},{"location":"clioptions/#version","text":"Usage ./after-effect -v OR ./after-effects --version This will display version info. You do not have to be root to run this.","title":"Version"},{"location":"clioptions/#autopilot-mode","text":"Autopilot mode is designed to run the script in a non interactive manner. Please see Autopilot in tasks for more info.","title":"Autopilot Mode"},{"location":"clioptions/#help","text":"Displays this help option. ./after-effects -h A Post Installation Script for Ubuntu, Debian, Linux-Mint, elementaryOS, Pop!_OS, MX Linux etc. Usage: [sudo] ./after-effects [options] Non-Action options (can be run as non-root user) --------------------------------------------------------- [-v | --version] Display version info. [-h | --help] Display this help message. Configuration Options --------------------------------------------------------- [-c | --config-file] Local yaml config file. [-r | --remote-yaml] Use config yaml from a URL. The following options are \"action\" options and will make changes to your system depending on tasks selcted. --------------------------------------------------------- [-d | --purge] Enable Purging packages [-f | --fix] Fix codenames for new releases [-p | --pre-release] Same as --fix but for beta/alpha releases of Ubuntu and Debian. [--fix-mode-lts] Similar to --fix but fallback to last LTS. MUST be used with --fix. Only works on Ubuntu and Debian. [-k | --keep-debs] Do not invoke apt-clean & do not delete downloaded deb packages. [-l | --delete-log] Deletes the logfile. (log/after-effects.log) [-s | --simulate] Try not to make changes to system and use --dry-run Please read the documentation, to know its limits as everything cannot be simulated. Other Options --------------------------------------------------------- [--no-env-checks] Skip some env checks. [--no-version-check] Skip checking for latest version [-A | --autopilot] Enables AUTOPILOT mode(No Prompts). Debugging Options --------------------------------------------------------- [-nx | --nx] Just process config but do not make any changes to the system. [--debug] Prints debug logs. [--debug-trace] Prints trace level logs which includes output from apt-get and other commands. Documentation, License and Version Information --------------------------------------------------------- Version : 7.0.0 GitHub : https://git.io/ubuntu-post-install Docs : https://ae.prasadt.com License : GPLv3 ---------------------------------------------------------","title":"Help"},{"location":"configuration/","text":"Overview of Configuration files \u00b6 This Script is designed to be flexible. use --config-file FILENAME Check Sample YAML configuration file here. Autopilot mode \u00b6 Using --autopilot will run all the tasks specified in the YAML file. The order in which tasks are run is as follows. Update Upgrade packages Add repositories Add PPAs [if supported] Install packages Install .deb packages Purge unwanted packages Install static binaries Install snap packages Reserved Environment Variables \u00b6 Prefix AE_ and GITHUB_ are reserved as they are used for configuration and testing.","title":"Configuration"},{"location":"configuration/#overview-of-configuration-files","text":"This Script is designed to be flexible. use --config-file FILENAME Check Sample YAML configuration file here.","title":"Overview of Configuration files"},{"location":"configuration/#autopilot-mode","text":"Using --autopilot will run all the tasks specified in the YAML file. The order in which tasks are run is as follows. Update Upgrade packages Add repositories Add PPAs [if supported] Install packages Install .deb packages Purge unwanted packages Install static binaries Install snap packages","title":"Autopilot mode"},{"location":"configuration/#reserved-environment-variables","text":"Prefix AE_ and GITHUB_ are reserved as they are used for configuration and testing.","title":"Reserved Environment Variables"},{"location":"license/","text":"License \u00b6 This project is licensed under GPL v3. External libraries and tools \u00b6 This project uses mkdocs for documentation with mkdocs-material theme. Emoji \u00b6 EmojiOne and Twemoji are licensed under CC BY 4.0. Fonts \u00b6 Ubuntu fonts are licensed under Ubuntu font license .","title":"License"},{"location":"license/#license","text":"This project is licensed under GPL v3.","title":"License"},{"location":"license/#external-libraries-and-tools","text":"This project uses mkdocs for documentation with mkdocs-material theme.","title":"External libraries and tools"},{"location":"license/#emoji","text":"EmojiOne and Twemoji are licensed under CC BY 4.0.","title":"Emoji"},{"location":"license/#fonts","text":"Ubuntu fonts are licensed under Ubuntu font license .","title":"Fonts"},{"location":"tasks/","text":"What can it do? \u00b6 Add Repositories \u00b6 This task can add the following repositories. Name Key Packages Docker docker docker-ce, containerd.io, docker-ce-cli GitHub - CLI github gh Google - Bazel bazel bazel Google - Chrome chrome google-chrome-stable, google-chrome-beta Google - Cloud SDK googlecloud google-cloud-sdk, kubectl, google-cloud-sdk-minikube Google - gVisor gvisor runsc Hashicorp hashicorp terraform, consul, nomad, vault, boundary, waypoint Mendeley desktop mendeley mendeleydesktop Microsoft - Azure CLI azurecli azure-cli Microsoft - Edge edge microsoft-edge-dev Microsoft - Skype skype skypeforlinux Microsoft - Teams teams teams, teams-insiders Microsoft - VSCode vscode code, code-insiders, code-exploration Podman (via OBS) podman podman, podman-plugins, cri-o-runc, cri-tools, buildah, crun ROS ros ROS2 ros2 Signal signal signal-desktop Spotify Client spotify spotify-client Sublime Text Editor sublimetext sublime-text Wine HQ winehq winehq-stable, winehq-staging Ubuntu - Universe ubuntu_universe Ubuntu - Multiverse ubuntu_multiverse Ubuntu - Restricted ubuntu_restricted Debian - contrib debian_contrib Debian - non-free debian_nonfree Support for adding multiverse , universe , restricted (on Ubuntu), contrib and non-free (on Debian) is considered beta. Use with caution! Using --fix flag Please note that the above repositories are sometimes not updated for latest Ubuntu release and most certainly will not be available for upcoming release of Ubuntu(Alpha/Beta). It might take some time till the repositories are available for the latest release. Use -f or --fix command line option or --pre-release in case you are using a development version of Ubuntu to revert using latest available version of repositories (usually previous Ubuntu release or in case of Beta/Alpha latest stable release of Ubuntu). For more info see command line options. ROS Releases & Ubuntu/Debian versions ROS repository only supports certain Ubuntu/Debian distributions. You can find more info at ROS-Wiki Though Ubuntu derivatives might work, they are not supported. Example yaml configuration snippet is given below. config : # Enabled Tasks tasks : update : true # Add Repos # individual repos flags are mentioned under config.add_repo key repo : true # Repository Flags add_repo : azurecli : true bazel : true chrome : true docker : true edge : true gcsfuse : true github : true googlecloud : true gvisor : true hashicorp : true mendeley : true podman : true ros : true ros2 : true signal : true skype : true spotify : true sublimetext : true teams : true vscode : true winehq : true # Debian debian_nonfree : true debian_contrib : true # Ubuntu ubuntu_universe : true ubuntu_multiverse : true ubuntu_restricted : true Note about Wine HQ and i386 packages \u00b6 To install i386 pacakges or packages which have i386 dependencies (eg. wine-stable), you MUST enable foreign architectures BEFORE running this script! Note abount Podman repository \u00b6 Podman repository(provided by Kubic project) also provides golang package for some reason. So please be careful while installing golang via apt. Add personal package archives (PPA) \u00b6 Array of PPAs including prefix ppa: . Inline comments are NOT allowed. Logs will show entry in the format [date and time] [ PPA-Logs ] <log> Install apt packages \u00b6 There are seven list of packages under key config.install.apt.< category > administration - Contains Administrative packages security - Contains Security related tools and packages productivity - Office tools, writing tools, LateX, document tools and other productivity tools, Email clients, browsers, IM clients etc. multimedia - Multimedia tools like media players, audio converters and playes etc. development - IDEs [Spyder, Jetbeans etc], languages [go, python, ruby, rust, java etc], Containers [docker lxc rkt etc], Python libraries, compilers [gcc, clang] SDKs [AWS SDK, Google Cloud SDK, open-jdk, Tensor Flow], headers and libraries[ocl-icd-dev], Anything related to development and -dev or -devl packages. other - Everything which does not fit in the above categories. Themes, Tools, Utilities etc. external - Any packages which are provided by ppas, or repositories not present in base Ubuntu distribution. There's a possibility that the repository might not be added or may be unavailable or offline. So Keeping the list separate from others packages minimizes errors if there are any. This classification is only for ease of use and need not be strictly followed. You can put 'vlc' package in 'security', it will still install fine. This classification helps while writing configs and editing them. Its advised to follow it if your configs tend to get to couple of hundreds of lines. Also YAML file should be a valid YAML & indented by 2 spaces. Special list of packages - Purge list \u00b6 There is a special package list under key, config.purge containig list of packages to be purged from the system. This only applies if purge flag is set and purge task is enabled (when autopilot is active) Install Debian package archives (.deb files) \u00b6 This will install deb files specified in the YAML config under config.install.debian_packages . Each element in the list file to be installed should have following entry. URL to the deb file which can be accessed using wget , Name of the deb file without any spaces or special chars except hyphen. For example to install Atom Editor the entry should look like below. Some deb packages will add their own apt source entry and add their repository keys to system keyring. Inline comments are NOT allowed. config : install : debian_packages : - https://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb First part is the URL to the deb file separated by , name of the file. Note on file name in configuration Please note that deb file will be saved with the name mentioned in the file. (DEB file is named exactly as mentioned in the second field. So if you want them to be named with extension .deb include that in the second field and avoid illegal chars and inline comments) Install Static binaries to /usr/local/bin \u00b6 This will install binaries bin.list or YAML config under config.install.binaries . Simulate option will download the package but not install it. Configuration is similar to deb files mentioned above. First part is the URL to the binary file followed by ',' and name of the binary. For example, to install docker-compose , the entry should look like below. config : install : binaries : - https://storage.googleapis.com/kubernetes-release/release/v1.20.1/bin/linux/amd64/kubectl,kubectl Note on file names in configuration Please note that file will be saved with the name mentioned in the file and will be in your path. Purge Unwanted Packages \u00b6 This will purge Unwanted packages from the system. The packages mentioned in config.purge in yaml. The format of the purge.list is similar to that of packages, one package per line Warning It is necessary to pass command line argument -d or set config.flags.purge_enabled: true in config. Installing Snap packages \u00b6 Script can install snap packages from snapstore. For example check the default config file. You should specify the classic snaps under install.snaps.calssic , edge snaps under install.snaps.edge and normal snaps under install.snaps.normal in the yaml file. config : install : snaps : normal : - htop classic : - vscode Warning Its responsibility of the user to separate classic snaps, edge and normal snaps. All In one \u00b6 This will perform Following actions. (In the following order) Update repository metadata Upgrade packages Add repositories Add PPAs Install APT packages Install DEB files Install static binaries Install snap packages This option will honor --autopilot and --simulate options as individual tasks would do. AUTOPILOT Mode \u00b6 Using --autopilot will skip all UI prompts and confirmations. This mode requires you to specify tasks to be run if using YAML config. Example snippet is given below. config : # Enabled Tasks tasks : update : true upgrade : true # Add Repos # individual repos flags are mentioned under config.add_repo repo : true # Add PPAs ppa : true # APT Packages apt : true # Whether to purge packages mentioned in config.purge purge : true # DEB packages debs : true # Staic binaries binaries : true # Snap packages snaps : true Name Key Add Repositories repo Add personal package archives (PPA) ppa Install apt packages apt Install Debian package archives (.deb files) dev Install Static binaries to /usr/local/bin binaries Purge Unwanted Packages purge Installing Snap packages snaps All In one all Delete logs \u00b6 A log file is generated containing all the output generated by the apt and other commands This task will delete the log file after-effects.log . Log file is located in the directory logs in folder which you ran thin script. Sometimes errors might not be written to log file but displayed on screen and vice-versa.","title":"Tasks"},{"location":"tasks/#what-can-it-do","text":"","title":"What can it do?"},{"location":"tasks/#add-repositories","text":"This task can add the following repositories. Name Key Packages Docker docker docker-ce, containerd.io, docker-ce-cli GitHub - CLI github gh Google - Bazel bazel bazel Google - Chrome chrome google-chrome-stable, google-chrome-beta Google - Cloud SDK googlecloud google-cloud-sdk, kubectl, google-cloud-sdk-minikube Google - gVisor gvisor runsc Hashicorp hashicorp terraform, consul, nomad, vault, boundary, waypoint Mendeley desktop mendeley mendeleydesktop Microsoft - Azure CLI azurecli azure-cli Microsoft - Edge edge microsoft-edge-dev Microsoft - Skype skype skypeforlinux Microsoft - Teams teams teams, teams-insiders Microsoft - VSCode vscode code, code-insiders, code-exploration Podman (via OBS) podman podman, podman-plugins, cri-o-runc, cri-tools, buildah, crun ROS ros ROS2 ros2 Signal signal signal-desktop Spotify Client spotify spotify-client Sublime Text Editor sublimetext sublime-text Wine HQ winehq winehq-stable, winehq-staging Ubuntu - Universe ubuntu_universe Ubuntu - Multiverse ubuntu_multiverse Ubuntu - Restricted ubuntu_restricted Debian - contrib debian_contrib Debian - non-free debian_nonfree Support for adding multiverse , universe , restricted (on Ubuntu), contrib and non-free (on Debian) is considered beta. Use with caution! Using --fix flag Please note that the above repositories are sometimes not updated for latest Ubuntu release and most certainly will not be available for upcoming release of Ubuntu(Alpha/Beta). It might take some time till the repositories are available for the latest release. Use -f or --fix command line option or --pre-release in case you are using a development version of Ubuntu to revert using latest available version of repositories (usually previous Ubuntu release or in case of Beta/Alpha latest stable release of Ubuntu). For more info see command line options. ROS Releases & Ubuntu/Debian versions ROS repository only supports certain Ubuntu/Debian distributions. You can find more info at ROS-Wiki Though Ubuntu derivatives might work, they are not supported. Example yaml configuration snippet is given below. config : # Enabled Tasks tasks : update : true # Add Repos # individual repos flags are mentioned under config.add_repo key repo : true # Repository Flags add_repo : azurecli : true bazel : true chrome : true docker : true edge : true gcsfuse : true github : true googlecloud : true gvisor : true hashicorp : true mendeley : true podman : true ros : true ros2 : true signal : true skype : true spotify : true sublimetext : true teams : true vscode : true winehq : true # Debian debian_nonfree : true debian_contrib : true # Ubuntu ubuntu_universe : true ubuntu_multiverse : true ubuntu_restricted : true","title":"Add Repositories"},{"location":"tasks/#note-about-wine-hq-and-i386-packages","text":"To install i386 pacakges or packages which have i386 dependencies (eg. wine-stable), you MUST enable foreign architectures BEFORE running this script!","title":"Note about Wine HQ and i386 packages"},{"location":"tasks/#note-abount-podman-repository","text":"Podman repository(provided by Kubic project) also provides golang package for some reason. So please be careful while installing golang via apt.","title":"Note abount Podman repository"},{"location":"tasks/#add-personal-package-archives-ppa","text":"Array of PPAs including prefix ppa: . Inline comments are NOT allowed. Logs will show entry in the format [date and time] [ PPA-Logs ] <log>","title":"Add personal package archives (PPA)"},{"location":"tasks/#install-apt-packages","text":"There are seven list of packages under key config.install.apt.< category > administration - Contains Administrative packages security - Contains Security related tools and packages productivity - Office tools, writing tools, LateX, document tools and other productivity tools, Email clients, browsers, IM clients etc. multimedia - Multimedia tools like media players, audio converters and playes etc. development - IDEs [Spyder, Jetbeans etc], languages [go, python, ruby, rust, java etc], Containers [docker lxc rkt etc], Python libraries, compilers [gcc, clang] SDKs [AWS SDK, Google Cloud SDK, open-jdk, Tensor Flow], headers and libraries[ocl-icd-dev], Anything related to development and -dev or -devl packages. other - Everything which does not fit in the above categories. Themes, Tools, Utilities etc. external - Any packages which are provided by ppas, or repositories not present in base Ubuntu distribution. There's a possibility that the repository might not be added or may be unavailable or offline. So Keeping the list separate from others packages minimizes errors if there are any. This classification is only for ease of use and need not be strictly followed. You can put 'vlc' package in 'security', it will still install fine. This classification helps while writing configs and editing them. Its advised to follow it if your configs tend to get to couple of hundreds of lines. Also YAML file should be a valid YAML & indented by 2 spaces.","title":"Install apt packages"},{"location":"tasks/#special-list-of-packages-purge-list","text":"There is a special package list under key, config.purge containig list of packages to be purged from the system. This only applies if purge flag is set and purge task is enabled (when autopilot is active)","title":"Special list of packages - Purge list"},{"location":"tasks/#install-debian-package-archives-deb-files","text":"This will install deb files specified in the YAML config under config.install.debian_packages . Each element in the list file to be installed should have following entry. URL to the deb file which can be accessed using wget , Name of the deb file without any spaces or special chars except hyphen. For example to install Atom Editor the entry should look like below. Some deb packages will add their own apt source entry and add their repository keys to system keyring. Inline comments are NOT allowed. config : install : debian_packages : - https://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb First part is the URL to the deb file separated by , name of the file. Note on file name in configuration Please note that deb file will be saved with the name mentioned in the file. (DEB file is named exactly as mentioned in the second field. So if you want them to be named with extension .deb include that in the second field and avoid illegal chars and inline comments)","title":"Install Debian package archives (.deb files)"},{"location":"tasks/#install-static-binaries-to-usrlocalbin","text":"This will install binaries bin.list or YAML config under config.install.binaries . Simulate option will download the package but not install it. Configuration is similar to deb files mentioned above. First part is the URL to the binary file followed by ',' and name of the binary. For example, to install docker-compose , the entry should look like below. config : install : binaries : - https://storage.googleapis.com/kubernetes-release/release/v1.20.1/bin/linux/amd64/kubectl,kubectl Note on file names in configuration Please note that file will be saved with the name mentioned in the file and will be in your path.","title":"Install Static binaries to /usr/local/bin"},{"location":"tasks/#purge-unwanted-packages","text":"This will purge Unwanted packages from the system. The packages mentioned in config.purge in yaml. The format of the purge.list is similar to that of packages, one package per line Warning It is necessary to pass command line argument -d or set config.flags.purge_enabled: true in config.","title":"Purge Unwanted Packages"},{"location":"tasks/#installing-snap-packages","text":"Script can install snap packages from snapstore. For example check the default config file. You should specify the classic snaps under install.snaps.calssic , edge snaps under install.snaps.edge and normal snaps under install.snaps.normal in the yaml file. config : install : snaps : normal : - htop classic : - vscode Warning Its responsibility of the user to separate classic snaps, edge and normal snaps.","title":"Installing Snap packages"},{"location":"tasks/#all-in-one","text":"This will perform Following actions. (In the following order) Update repository metadata Upgrade packages Add repositories Add PPAs Install APT packages Install DEB files Install static binaries Install snap packages This option will honor --autopilot and --simulate options as individual tasks would do.","title":"All In one"},{"location":"tasks/#autopilot-mode","text":"Using --autopilot will skip all UI prompts and confirmations. This mode requires you to specify tasks to be run if using YAML config. Example snippet is given below. config : # Enabled Tasks tasks : update : true upgrade : true # Add Repos # individual repos flags are mentioned under config.add_repo repo : true # Add PPAs ppa : true # APT Packages apt : true # Whether to purge packages mentioned in config.purge purge : true # DEB packages debs : true # Staic binaries binaries : true # Snap packages snaps : true Name Key Add Repositories repo Add personal package archives (PPA) ppa Install apt packages apt Install Debian package archives (.deb files) dev Install Static binaries to /usr/local/bin binaries Purge Unwanted Packages purge Installing Snap packages snaps All In one all","title":"AUTOPILOT Mode"},{"location":"tasks/#delete-logs","text":"A log file is generated containing all the output generated by the apt and other commands This task will delete the log file after-effects.log . Log file is located in the directory logs in folder which you ran thin script. Sometimes errors might not be written to log file but displayed on screen and vice-versa.","title":"Delete logs"},{"location":"testing/","text":"CI and Testing \u00b6 Script is tested using the simulate mode on supported versions of Ubuntu, Debian and Elementary using Docker. Test scripts can be found in tests directory.","title":"Testing"},{"location":"testing/#ci-and-testing","text":"Script is tested using the simulate mode on supported versions of Ubuntu, Debian and Elementary using Docker. Test scripts can be found in tests directory.","title":"CI and Testing"},{"location":"yaml/","text":"YAML Config \u00b6 The configuration file is pretty much self explanatory. All Boolean fields are optional and if not provided or if found to be invalid, fallback to false. Sample configs can be found in config directory. # Install Config # Install Config api : 2 name : Minimal author : Prasad T # Configuration config : # Enabled Tasks tasks : update : true upgrade : false # Add Repos # individual repos flags are mentioned under config.add_repo key repo : true # Add PPAs ppa : true # APT Packages apt : true # Whether to purge packages mentioned in config.purge key purge : true debs : true binaries : true snaps : true # Repository Flags add_repo : azurecli : true bazel : true chrome : true docker : true edge : true gcsfuse : true github : true googlecloud : true gvisor : true hashicorp : true mendeley : false podman : true ros : true ros2 : true signal : true skype : true spotify : true sublimetext : true teams : true vscode : true winehq : true # Flags flags : purge_enabled : true preserve_debs : false # Packages to purge purge : - gnome-mines - gnome-sudoku - aisleriot - gnome-mahjongg # PPA List ppa : - ppa:yubico/stable # Install components # APT Packages, Python Modules, Debian packages install : # Debian packages: .deb files # CSV format similar to lists debian_packages : - https://download.teamviewer.com/download/teamviewer_i386.deb,TeamViewer.deb # Static Binaries which will be placed in /usr/local/bin # minikube, docker-compose, etc. # Follows same pattern as Debian packages # Name to be saved is second field binaries : - https://github.com/kubernetes/minikube/releases/download/v0.28.2/minikube-linux-amd64,minikube - https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose apt : # Admin related Stuff administration : - dconf-editor - htop - apt-xapian-index - gdebi - gparted - synaptic - bleachbit # Security Related Stuff security : - gufw # Productivity & Office Tools. productivity : - empathy - evolution - realmd - pandoc-data - pandoc - texstudio - texlive-fonts-extra - texlive-formats-extra - texlive-fonts-recommended - texlive-science - texlive-generic-extra - texlive-xetex - texlive-luatex - texlive-pstricks - texlive-science - texlive-extra-utils - texlive-lang-english - texlive-lang-other - texlive-font-utils - texlive-publishers - gummi # Multimedia Tools. Photo Editors Converting tools etc. multimedia : - audacity - vlc - gimp - handbrake - handbrake-cli - rawtherapee - darktable - mpv - pavucontrol - cheese # Tools related to development. development : - curl - git - shellcheck - ocl-icd-dev - putty - python3-pip # Everything Else other : - gnome-online-miners # Packages supplied by external repositories & PPAs external : - google-chrome-stable - spotify-client - code - google-cloud-sdk - docker-ce - runsc - azure-cli - microsoft-edge-dev","title":"Example"},{"location":"yaml/#yaml-config","text":"The configuration file is pretty much self explanatory. All Boolean fields are optional and if not provided or if found to be invalid, fallback to false. Sample configs can be found in config directory. # Install Config # Install Config api : 2 name : Minimal author : Prasad T # Configuration config : # Enabled Tasks tasks : update : true upgrade : false # Add Repos # individual repos flags are mentioned under config.add_repo key repo : true # Add PPAs ppa : true # APT Packages apt : true # Whether to purge packages mentioned in config.purge key purge : true debs : true binaries : true snaps : true # Repository Flags add_repo : azurecli : true bazel : true chrome : true docker : true edge : true gcsfuse : true github : true googlecloud : true gvisor : true hashicorp : true mendeley : false podman : true ros : true ros2 : true signal : true skype : true spotify : true sublimetext : true teams : true vscode : true winehq : true # Flags flags : purge_enabled : true preserve_debs : false # Packages to purge purge : - gnome-mines - gnome-sudoku - aisleriot - gnome-mahjongg # PPA List ppa : - ppa:yubico/stable # Install components # APT Packages, Python Modules, Debian packages install : # Debian packages: .deb files # CSV format similar to lists debian_packages : - https://download.teamviewer.com/download/teamviewer_i386.deb,TeamViewer.deb # Static Binaries which will be placed in /usr/local/bin # minikube, docker-compose, etc. # Follows same pattern as Debian packages # Name to be saved is second field binaries : - https://github.com/kubernetes/minikube/releases/download/v0.28.2/minikube-linux-amd64,minikube - https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose apt : # Admin related Stuff administration : - dconf-editor - htop - apt-xapian-index - gdebi - gparted - synaptic - bleachbit # Security Related Stuff security : - gufw # Productivity & Office Tools. productivity : - empathy - evolution - realmd - pandoc-data - pandoc - texstudio - texlive-fonts-extra - texlive-formats-extra - texlive-fonts-recommended - texlive-science - texlive-generic-extra - texlive-xetex - texlive-luatex - texlive-pstricks - texlive-science - texlive-extra-utils - texlive-lang-english - texlive-lang-other - texlive-font-utils - texlive-publishers - gummi # Multimedia Tools. Photo Editors Converting tools etc. multimedia : - audacity - vlc - gimp - handbrake - handbrake-cli - rawtherapee - darktable - mpv - pavucontrol - cheese # Tools related to development. development : - curl - git - shellcheck - ocl-icd-dev - putty - python3-pip # Everything Else other : - gnome-online-miners # Packages supplied by external repositories & PPAs external : - google-chrome-stable - spotify-client - code - google-cloud-sdk - docker-ce - runsc - azure-cli - microsoft-edge-dev","title":"YAML Config"},{"location":"drafts/proposed-changes/","text":"Proposed Changes \u00b6 APT config for adding generic apt repos \u00b6 Not yet in stable. There is no plan to remove Google Chrome ROS VSCode Docker Spotify Skype Google Cloud from apt-repo configs. they will be supported with single entry config via add_repo.<id> . However following may be removed in the future versions as they are not supported properly by their vendors and often require some tweaks or for other reasons. You can add them via new apt_sources config if you want. InSync Duo Security GCSFUSE(hasn't been updated since bionic) apt_sources : # Comment, This will show in software properties - comment : Google Chrome # GPG key Can be URL or a GPG key # Keys will be retrieved from Ubuntu key-server. key_url : key_id : # URL for repo # Variable interpolation is possible # Following variables are supported # CODE_NAME for release codename eg. bionic # DISTRO_NAME for name of the distribution eg.ubuntu source : # Additional architecture support armhf : true i386 : false arm64 : true # Supports Debian # Should be a bool # Default is true debian : true # Supports Derivatives like mint? # Can be yes, base or no # base will use ubuntu as its base # default is to use fix derivative : base # Some repositories only support LTS # Default is false ltsonly : false # Save .list file as # Mandatory # Do not include .list it will be added automatically name : google-chrome","title":"Proposed Changes"},{"location":"drafts/proposed-changes/#proposed-changes","text":"","title":"Proposed Changes"},{"location":"drafts/proposed-changes/#apt-config-for-adding-generic-apt-repos","text":"Not yet in stable. There is no plan to remove Google Chrome ROS VSCode Docker Spotify Skype Google Cloud from apt-repo configs. they will be supported with single entry config via add_repo.<id> . However following may be removed in the future versions as they are not supported properly by their vendors and often require some tweaks or for other reasons. You can add them via new apt_sources config if you want. InSync Duo Security GCSFUSE(hasn't been updated since bionic) apt_sources : # Comment, This will show in software properties - comment : Google Chrome # GPG key Can be URL or a GPG key # Keys will be retrieved from Ubuntu key-server. key_url : key_id : # URL for repo # Variable interpolation is possible # Following variables are supported # CODE_NAME for release codename eg. bionic # DISTRO_NAME for name of the distribution eg.ubuntu source : # Additional architecture support armhf : true i386 : false arm64 : true # Supports Debian # Should be a bool # Default is true debian : true # Supports Derivatives like mint? # Can be yes, base or no # base will use ubuntu as its base # default is to use fix derivative : base # Some repositories only support LTS # Default is false ltsonly : false # Save .list file as # Mandatory # Do not include .list it will be added automatically name : google-chrome","title":"APT config for adding generic apt repos"},{"location":"faq/debug/","text":"Logs \u00b6 Logs are written to a file <current-dir>/logs/after-effects.log . Debugging the script \u00b6 You can chose from multiple debug modes. --debug Only prints debug messages --debug-trace Prints debug messages and apt/dpkg/snap/ppa logs. Please note that This can generate a lot of output. Local testing \u00b6 You can use ./tests/local.sh --help to test the scripts locally. It uses docker to build and test the script in simulate mode inside containers. This script requires two arguments --distro and --release . They are used as parameters to build the Docker image from dockerfile in dockerfiles/tests .eg. to test the script on Ubuntu 18.04 bionic, run it as ./tests/local.sh --distro ubuntu --release bionic . Documentation \u00b6 Docs are built using mkdocs. If you spot a mistake or a typo, you can submit a Pull request to fix it. You can test the docs locally with provided docker-compose file. docker-compose up and navigate to localhost:8000 to view the documentation.","title":"Debugging"},{"location":"faq/debug/#logs","text":"Logs are written to a file <current-dir>/logs/after-effects.log .","title":"Logs"},{"location":"faq/debug/#debugging-the-script","text":"You can chose from multiple debug modes. --debug Only prints debug messages --debug-trace Prints debug messages and apt/dpkg/snap/ppa logs. Please note that This can generate a lot of output.","title":"Debugging the script"},{"location":"faq/debug/#local-testing","text":"You can use ./tests/local.sh --help to test the scripts locally. It uses docker to build and test the script in simulate mode inside containers. This script requires two arguments --distro and --release . They are used as parameters to build the Docker image from dockerfile in dockerfiles/tests .eg. to test the script on Ubuntu 18.04 bionic, run it as ./tests/local.sh --distro ubuntu --release bionic .","title":"Local testing"},{"location":"faq/debug/#documentation","text":"Docs are built using mkdocs. If you spot a mistake or a typo, you can submit a Pull request to fix it. You can test the docs locally with provided docker-compose file. docker-compose up and navigate to localhost:8000 to view the documentation.","title":"Documentation"},{"location":"faq/dependencies/","text":"Dependencies \u00b6 What do I need to run this \u00b6 Usually nothing extra! Your base Ubuntu install comes with all the commands/utilities this script uses. Core dependencies \u00b6 The script depends on following utilities which are usually present on a typical Ubuntu/Ubuntu based installation. If these packages are not installed, script will exit with error code 1. Install Dependencies sudo apt-get install -y --no-install-recommends whiptail coreutils procps wget whiptail , to display the menu (not needed if used with --autopilot ) coreutils cut, tr, grep etc. wget , to get deb packages check for updates etc. procps to check running processes awk , sed to parse configs bash (4.x) Additional packages installed \u00b6 Some tasks might install packages automatically, as required to perform certain actions. Additional APT packages installed Some apt packages will be installed automatically, as they are necessary to perform selected tasks. For repository related tasks \u00b6 apt-transport-https ca-certificates curl gnupg2 software-properties-common For removing PPAs \u00b6 ppa-purge For snap packages \u00b6 snapd Any dependencies of these packages will also be installed.","title":"Dependencies"},{"location":"faq/dependencies/#dependencies","text":"","title":"Dependencies"},{"location":"faq/dependencies/#what-do-i-need-to-run-this","text":"Usually nothing extra! Your base Ubuntu install comes with all the commands/utilities this script uses.","title":"What do I need to run this"},{"location":"faq/dependencies/#core-dependencies","text":"The script depends on following utilities which are usually present on a typical Ubuntu/Ubuntu based installation. If these packages are not installed, script will exit with error code 1. Install Dependencies sudo apt-get install -y --no-install-recommends whiptail coreutils procps wget whiptail , to display the menu (not needed if used with --autopilot ) coreutils cut, tr, grep etc. wget , to get deb packages check for updates etc. procps to check running processes awk , sed to parse configs bash (4.x)","title":"Core dependencies"},{"location":"faq/dependencies/#additional-packages-installed","text":"Some tasks might install packages automatically, as required to perform certain actions. Additional APT packages installed Some apt packages will be installed automatically, as they are necessary to perform selected tasks.","title":"Additional packages installed"},{"location":"faq/dependencies/#for-repository-related-tasks","text":"apt-transport-https ca-certificates curl gnupg2 software-properties-common","title":"For repository related tasks"},{"location":"faq/dependencies/#for-removing-ppas","text":"ppa-purge","title":"For removing PPAs"},{"location":"faq/dependencies/#for-snap-packages","text":"snapd Any dependencies of these packages will also be installed.","title":"For snap packages"},{"location":"faq/distros/","text":"Supported Distributions \u00b6 In short? Ubuntu, its official flavors (Kubuntu, Ubuntu Mate, Ubuntu Budgie etc.), Linux Mint, Debian and Elementary. Scrip is not tested the script on the distros listed below. Because they use Ubuntu as their base, It should work fine. But no promises. Warning! Script will exit, if it cannot recognize the distribution. A Complete list of supported distributions is given below. Distribution Code name/Version Supported Notes Ubuntu 20.04 Focal Fossa Yes Ubuntu 20.10 Groovy Gorilla Yes Ubuntu 21.04 Hirsute Hippo Yes Ubuntu 18.04 Bionic Beaver Yes Linux Mint 20,20.x Ulyana, Ulyssa Yes Linux Mint 19,19.X Yes Debian 10 Buster Yes Debian 9 Stretch Yes Elementary-OS 5.1 Hera Yes Elementary-OS 5.0 Juno Yes Not tested PoP! OS Same as Ubuntu Yes Not tested MX Linux 19 (Buster) Yes Not tested Bodhi Linux 5.1 Yes (Based on Ubuntu 18.04) KDE Neon Same as Ubuntu LTS Yes Not Tested Peppermint 10,11 Based on Ubuntu Yes Not Tested Italics : Latest stable LTS release(if any) Bold : Latest stable release","title":"Distros"},{"location":"faq/distros/#supported-distributions","text":"In short? Ubuntu, its official flavors (Kubuntu, Ubuntu Mate, Ubuntu Budgie etc.), Linux Mint, Debian and Elementary. Scrip is not tested the script on the distros listed below. Because they use Ubuntu as their base, It should work fine. But no promises. Warning! Script will exit, if it cannot recognize the distribution. A Complete list of supported distributions is given below. Distribution Code name/Version Supported Notes Ubuntu 20.04 Focal Fossa Yes Ubuntu 20.10 Groovy Gorilla Yes Ubuntu 21.04 Hirsute Hippo Yes Ubuntu 18.04 Bionic Beaver Yes Linux Mint 20,20.x Ulyana, Ulyssa Yes Linux Mint 19,19.X Yes Debian 10 Buster Yes Debian 9 Stretch Yes Elementary-OS 5.1 Hera Yes Elementary-OS 5.0 Juno Yes Not tested PoP! OS Same as Ubuntu Yes Not tested MX Linux 19 (Buster) Yes Not tested Bodhi Linux 5.1 Yes (Based on Ubuntu 18.04) KDE Neon Same as Ubuntu LTS Yes Not Tested Peppermint 10,11 Based on Ubuntu Yes Not Tested Italics : Latest stable LTS release(if any) Bold : Latest stable release","title":"Supported Distributions"},{"location":"faq/errors/","text":"Errors \u00b6 What if I get an error saying Unknown Distribution/Release? \u00b6 That usually means you are running a Distribution which is not supported, too old or a derivative which is not recognized by the script. consider opening an issue on GitHub. What if I get an error saying this release of Ubuntu is no longer supported? \u00b6 [ Derivatives ] Checking... [ EOL ] This version of Ubuntu is no longer supported. [ EOL ] Ubuntu 19.04 reached EOL on January 23rd, 2020. _______________________________________________________ Exit code is 12 Well, thats pretty much self explanatory! Please use supported release of Ubuntu/Mint/Debian. Warning Ubuntu ESM versions are considered as EOL Something not mentioned above \u00b6 Report Well, that shouldn't have happened. Please open an issue on Github . Tip In extremely rare cases where your script exited while installing a package, which has unmet dependencies, you might see broken packages error. In that case, run sudo apt-get install -f to fix the broken packages and run the script again.","title":"Errors"},{"location":"faq/errors/#errors","text":"","title":"Errors"},{"location":"faq/errors/#what-if-i-get-an-error-saying-unknown-distributionrelease","text":"That usually means you are running a Distribution which is not supported, too old or a derivative which is not recognized by the script. consider opening an issue on GitHub.","title":"What if I get an error saying Unknown Distribution/Release?"},{"location":"faq/errors/#what-if-i-get-an-error-saying-this-release-of-ubuntu-is-no-longer-supported","text":"[ Derivatives ] Checking... [ EOL ] This version of Ubuntu is no longer supported. [ EOL ] Ubuntu 19.04 reached EOL on January 23rd, 2020. _______________________________________________________ Exit code is 12 Well, thats pretty much self explanatory! Please use supported release of Ubuntu/Mint/Debian. Warning Ubuntu ESM versions are considered as EOL","title":"What if I get an error saying this release of Ubuntu is no longer supported?"},{"location":"faq/errors/#something-not-mentioned-above","text":"Report Well, that shouldn't have happened. Please open an issue on Github . Tip In extremely rare cases where your script exited while installing a package, which has unmet dependencies, you might see broken packages error. In that case, run sudo apt-get install -f to fix the broken packages and run the script again.","title":"Something not mentioned above"},{"location":"faq/exit-codes/","text":"Exit Codes \u00b6 Exit Codes Reason 1- 10 Script cannot run on the system 1 Dependencies are not met 2 Script not running as root 8 Remote get operation failed. 5 Failed to determine distribution. Is /etc/os-release file missing? 10-19 Not running with right configuration or internal flags 11 Unsupported architecture 12 End of Life release 14 No Internet connection 15 Conflicting apps are running 16 Distribution is not supported 17 Distribution is not yet supported. But will be in the future. 19 Internal Functions: Invalid arguments 20- 254 User configuration / Run-time errors 20 Purge function is called without -d flag 21 Failed to install dependencies 22 Invalid flag passed 23 Invalid argument position 24 Not Running the latest version 25 Incompatible arguments 26 Option is obsolete 28 Getting API response failed 29 DEPRECATED_EXIT_CODE 35 Not a valid config file type 36 file defined does not exist/not accessible 37 Configuration error. Expects Boolean but found something else. 38 Failed to delete a file 39 DEPRECATED_EXIT_CODE 40 Failed to unset an array 41 DEPRECATED_EXIT_CODE 51 GPG signature checks failed 52 SHA checksums did not match 53 List mode is no longer supported. 54 not running with autopilot when terminal is non interactive. 61 apt-get update failed with some warnings or errors 62 DEPRECATED_EXIT_CODE 63 Undefined configuration 64 Required basefiles/directories are missing (Your installation of Ubuntu is broken) 66 67 Failed to map code_name to AE_OBS_PREFIX 255 Test Exit code","title":"Exit Codes"},{"location":"faq/exit-codes/#exit-codes","text":"Exit Codes Reason 1- 10 Script cannot run on the system 1 Dependencies are not met 2 Script not running as root 8 Remote get operation failed. 5 Failed to determine distribution. Is /etc/os-release file missing? 10-19 Not running with right configuration or internal flags 11 Unsupported architecture 12 End of Life release 14 No Internet connection 15 Conflicting apps are running 16 Distribution is not supported 17 Distribution is not yet supported. But will be in the future. 19 Internal Functions: Invalid arguments 20- 254 User configuration / Run-time errors 20 Purge function is called without -d flag 21 Failed to install dependencies 22 Invalid flag passed 23 Invalid argument position 24 Not Running the latest version 25 Incompatible arguments 26 Option is obsolete 28 Getting API response failed 29 DEPRECATED_EXIT_CODE 35 Not a valid config file type 36 file defined does not exist/not accessible 37 Configuration error. Expects Boolean but found something else. 38 Failed to delete a file 39 DEPRECATED_EXIT_CODE 40 Failed to unset an array 41 DEPRECATED_EXIT_CODE 51 GPG signature checks failed 52 SHA checksums did not match 53 List mode is no longer supported. 54 not running with autopilot when terminal is non interactive. 61 apt-get update failed with some warnings or errors 62 DEPRECATED_EXIT_CODE 63 Undefined configuration 64 Required basefiles/directories are missing (Your installation of Ubuntu is broken) 66 67 Failed to map code_name to AE_OBS_PREFIX 255 Test Exit code","title":"Exit Codes"}]}