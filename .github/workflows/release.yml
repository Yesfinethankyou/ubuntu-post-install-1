name: release
on:
  push:
    tags:
      - 'v*'
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      # For creating releases
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: true
          # Avoid breaking git rev date plugin
          fetch-depth: 0

      - name: Install git-chglog
        run: |
          brew tap git-chglog/git-chglog
          brew install git-chglog

      - name: Generate changelog
        run: |
          ./scripts/changelog.sh \
            --changelog \
            --oldest-tag "v7.0.0" \
            --footer-file .chglog/OLD_CHGLOG.md \
            --output docs/changelog.md \
            --repository "https://github.com/tprasadtp/ubuntu-post-install"
            cat docs/changelog.md

      - name: Generate release notes
        run: |
          ./scripts/changelog.sh \
            --changelog \
            --oldest-tag "v7.0.0" \
            --footer-file .chglog/OLD_CHGLOG.md \
            --output docs/changelog.md \
            --repository "https://github.com/tprasadtp/ubuntu-post-install"
            cat RELEASE_NOTES.md

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Version
        run: echo $VERSION

      - name: Checksums
        run: |
          sha256sum after-effects | tee -a sha256sums.txt
          sha512sum after-effects | tee -a sha512sums.txt

      # create a release on tag
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

      # Upload Release assets
      - name: Upload Script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: after-effects
          asset_name: after-effects
          asset_content_type: text/plain

      - name: Upload SIG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: after-effects.asc
          asset_name: after-effects.asc
          asset_content_type: text/plain

      - name: Upload Checksum SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: sha256sums.txt
          asset_name: sha256sums.txt
          asset_content_type: text/plain

      - name: Upload Checksum SHA512
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: sha512sums.txt
          asset_name: sha512sums.txt
          asset_content_type: text/plain
